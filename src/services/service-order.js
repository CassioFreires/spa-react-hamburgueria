import axios from 'axios';



// üì¶ Envia pedido
export async function sendOrder(order, token) {
    try {
        if (!token) {
            console.error('üö´ Token inv√°lido! ‚ùå');
            throw new Error('‚ö†Ô∏è Token n√£o fornecido.');
        }

        const res = await axios.post(`${import.meta.env.VITE_BASE_URL_API}:${import.meta.env.VITE_API_PORT}/orders/create`, { order }, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });

        if (!res || !res.data) {
            throw new Error('‚ö†Ô∏è Erro: Pedido n√£o retornado corretamente da API.');
        }

        console.log('‚úÖ Pedido enviado com sucesso! üéâ', res.data);
        return res.data;

    } catch (error) {
        console.error('‚ùå Erro ao enviar pedido:', error.response?.data || error.message);
        throw new Error('üö® Falha ao enviar pedido. Tente novamente.');
    }
}

// üì• Busca todos os pedidos
// üì• Busca todos os pedidos
export async function getAllOrdersService(token) {
    try {
        if (!token) {
            console.error('üö´ Token inv√°lido! ‚ùå');
            throw new Error('‚ö†Ô∏è Token n√£o fornecido.');
        }

        const res = await axios.get(`${import.meta.env.VITE_BASE_URL_API}:${import.meta.env.VITE_API_PORT}/orders/getAll`, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });

        if (!res || !res.data) {
            throw new Error('‚ö†Ô∏è Erro: Dados de pedidos n√£o retornados.');
        }

        const orders = res.data.orders;

        if (!orders || orders.length === 0) {
            console.info('‚ÑπÔ∏è N√£o existe nenhum pedido em andamento.');
            return { orders: [] }; // Ou qualquer estrutura vazia que seu front espera
        }

        console.log(`üì¶ ${orders.length} pedidos encontrados! ‚úÖ`);
        return res.data;

    } catch (error) {
        console.error('‚ùå Erro ao buscar pedidos:', error.response?.data || error.message);
        throw error; // Rejoga o erro original sem criar uma mensagem falsa
    }
}


export async function updateOrderStatusService(orderId, newStatus, token) {
    try {
        const res = await axios.patch(`${import.meta.env.VITE_BASE_URL_API}:${import.meta.env.VITE_API_PORT}/orders/updateStatus/${orderId}`, {
            orderId,
            status: newStatus,
        }, {
            headers: {
                Authorization: `Bearer ${token}`,
            }
        });

        if (!res || !res.data) {
            throw new Error('‚ö†Ô∏è Falha ao atualizar pedido.');
        }

        return res.data;
    } catch (error) {
        console.error('‚ùå Erro ao atualizar pedido:', error.response?.data || error.message);
        throw new Error('üö® N√£o foi poss√≠vel atualizar o status do pedido.');
    }
}

export async function deleteOrderService(orderId, token) {
    try {
        const res = await axios.delete(
            `${import.meta.env.VITE_BASE_URL_API}:${import.meta.env.VITE_API_PORT}/orders/delete/${orderId}`,
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            }
        );

        if (!res || !res.data) {
            throw new Error('‚ö†Ô∏è Falha ao cancelar pedido.');
        }

        return res.data;
    } catch (error) {
        console.error('‚ùå Erro ao cancelar pedido:', error.response?.data || error.message);
        throw new Error('üö® N√£o foi poss√≠vel cancelar o pedido.');
    }
}